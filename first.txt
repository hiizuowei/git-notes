
/*
 *git 相关的command
 */
$ which -a git

$ vim .bashrc
  --->export PATH=/usr/local/git/bin:$PATH
  --->保证系统优先使用这个环境下的git

$ source .bashrc


$ git --version

//git 自动完成


$ git config --global user.name hiizuowei
$ git config --global user.email hiizuowei@gmail.com

//查看文档
$ git config --help
$ git help config
$ man git-config

//增加,可以是多个相同的key
$ git config --global --add user.name eoe

//查看
$ git config user.name
$ git config --get user.name

//list
$ git config --global --list

//删
$ git config --global --unset user.name
or
$ git config --global --unset user.name eoe //有多个相同的key时用这个

//修改
$ git config --global user.name eoe
$ git config --global user.name hiizuowei


//alias

$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.st status
$ git config --global alias.ci commit

$ git c-->>tab key

$ git log


-----@@@@@@@@@@@@@@@@@@@@@@@@@@@-------------------

Git基本的工作流程

它是如何存储文件?
它是如何存储记录?

Git使用40个16进制字符的SHA-1 Hash来唯一标识对象

Git有四种对象
1、blob --->>如文本文件，二进制文件，链接文件
2、tree --->>目录
3、commit --->>历史提交
4、tag --->>指向一个固定的历史提交

关系
   指向                  |-->tree
tag---->commit--->tree--->
			 |-->blob


commit指向的这么一个树形结构---》》就代表你提交的时候工作区的这么一个状态

对这些内容进行SHA-1 Hash之后就会得到它的唯一标识


Git 只关心文件的内容
如果两个文件有相同的内容，它们会指向同一个blob对象，而文件名及其它信息会存储在
tree对象里面

有了这些对象之后，我们就需要有仓库去存储它来进行操作


如何获取一个仓库？
1.git init
2.git clone


git仓有两种

一种是称之为裸仓库,不带工作区，通常放在服务器上方便其它用户进行协作
------------------
创建裸仓库
git init --bare git_bare_repo
ling:git_bare_repo (BARE:master)$ 
------------------
clone 裸仓库
ling:git$ git clone git_bare_repo/ git_clone_repo
------------------


git 仓库有三个区域
1.工作区--->>日常编辑代码的地方，维护着一个树形结构。
2.历史仓库--->>commit指向的树形结构

它们两者之间的区域--->>暂存区？
相当于工作区与历史仓库之间缓存
它代表的是你需要提交的一个工作状态
它维护的是一个虚拟树结构


Git的工作就是围绕这三个区域进行～～


working                     staging                 history
directory                    area                  respository
  |                           |                         |
  |                 checkout the project                |
  |                           |                         |
  |                           |                         |
  |                           |                         |
  |    stage files            |                         |
  |                           |                         |
  |                           |         commit          |
  |                           |                         |
  |                           |                         |
  |                           |                         |
   

如：
我们从工作区添加文件到暂存区～～
然后把暂存区这个整体的状态提交的历史记录里面～～
我们还可以从历史记录里面拣出文件到暂存区与工作区间～～

大部分时间都是往暂存区里添加东西，然后再把暂存区里的东西提交历史里面
对应的就是
1.git add
2.git commit
如何查看工作区与暂存区的区别？
3.git status
如何从暂存区删掉不需要的东西？
(工作区和暂存区里面里面的文件都会被干掉)
4.git rm
有时候我们需要在工作区中重命名文件或者移动文件，然后再把它们添加到暂存区里面去
5.git mv
确保工作区中的一些文件不被添加到staging area 与 history repository
6.gitignore

e.g--->>
$ git init git_basics

$ cd  git_basics/

$ touch a

$ touch b

$ git add .

$ git status

$ git commit -m "Initail commit"

$ vim a

$ git status

$ git add a

$ git status

$ git commit -m "modify a"

$ gir rm a //working directory and staging area's files will be detete


//只干掉暂存区的
$ git rm --cached a

$ git status
---->>会提示 Untracked files--->a

ling:git_basics (master +)$ git add a
ling:git_basics (master)$ git status
位于分支 master
无文件要提交，干净的工作区


$ git mv a c //实质上是一些操作的组合
//在工作区中帮你把文件重命名或者移动
//在暂存区中把原有的文件名干掉了
//然后在把新的文件添加进暂存区


$ git add -A
or 
$ git add .
//将整个working directory add to staging area.


//想要避免一些文件不要添加到历史记录里面
$ vim .gitignore

-->>*.[oa]
    *~
    *.pyc
    !test.pyc --->告诉git igonre (*.pyc)文件时，这个文件test.pyc不要 igonre 掉
    \!test.py --->>让git管理这个本身以！开头的文件，前面要加一个反斜杠
    foo/ --->>以斜杠结尾表明匹配的是一个目录(foo文件是命中不了的)
    ××/res --->>星星斜杠代表匹配0个或者多个目录（顶层的res可以命中，子目录的res也可命中）
    build/
    Documentation/
    src/
    .DS_Store

   
//根据项目需要编写.gitignore文件
$ vim .gitignore
$ git add .gitignore
$ git commit -m "add ignore"




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Git 暂存区的部分原理



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

1.git branch //创建分支

2.git tag  //给固定commit做标记

3.git chekout //切换分支

4.git stash //切换分支之前，保存本地修改

5.git merge //怎样合并分支


e.g
-------------------
第一个历史提交
ling:git_chekcout_merge (master #)$ vim master.txt
ling:git_chekcout_merge (master #)$ git add .
ling:git_chekcout_merge (master #)$ git commit -m "Initial commit on master"
-------------------
第二个历史提交
ling:git_chekcout_merge (master)$ vim master.txt
ling:git_chekcout_merge (master *)$ git add .
ling:git_chekcout_merge (master +)$ git commit -m "Second commit on master"
-------------------
开始新的模块开发，创建一个新的分支
ling:git_chekcout_merge (master)$ git branch test
//切换到新的分支
ling:git_chekcout_merge (master)$ git checkout test 
//开始新的工作
ling:git_chekcout_merge (test)$ vim master.txt 
ling:git_chekcout_merge (test *)$ touch  test.txt
ling:git_chekcout_merge (test *)$ git add .
//test分支第一次历史提交
ling:git_chekcout_merge (test +)$ git commit -m "Initial commit on test"
------------------
回到master分支工作
//切换分支实际上是用当前分支的最新提交来还原我们工作区与暂存区
ling:git_chekcout_merge (test)$ git checkout master


/×
    1.分支名是我们当前最新提交的commit一个引用
    2.分支没提交一次就会指向这个最新的提交
    3.如何让一个引用指向一个固定的提交(如版本released）？
    (为了当某一个released出问题的时候可以轻松回去修改)
×/
OK------------tag 出马-------------
tag分两种 
1.轻量级的，它只是你本地一个引用
2.带注解的，实质上是git tag 对象存储在git仓库里面，需要的时候可以push到服务器进行共享

-------------------e.g.---------------
//看一下提交情况
(master)$ git log  --oneline --decorate --graph --all
* 4cd6e16 (test) Initial commit on test
* b41e34e (HEAD -> master) Second commit on master
* 8f9ba6b Initial commit on master

--->做一个轻量的版本提交
ling:git_chekcout_merge (master)$ git tag "v0" b41e34e
--->做一个带注解的版本提交
ling:git_chekcout_merge (master)$ git tag -a "INITIAL_COMMIT" b41e34e
--->当前有哪一些tag
ling:git_chekcout_merge (master)$ git tag
INITIAL_COMMIT
v0
--->直接看一下某个轻量级的tag
ling:git_chekcout_merge (master)$ git show v0 
commit 8f9ba6b45af3cfc844b2329a73272d8e9372eb1f
……
====>>>发现它直接指向到某一个commit

--->看一带注解的tag
ling:git_chekcout_merge (master)$ git show INITIAL_COMMIT 
tag INITIAL_COMMIT
Tagger: hiizuowei <hiizuowei@gmail.com>
Date:   Fri Jun 12 00:11:53 2015 +0800

TAG FOR INITIAL_COMMIT

commit 8f9ba6b45af3cfc844b2329a73272d8e9372eb1f
……
====>>>发现它实际上是一个tag对象，然后指向了commit

----------------------------------------------
当我们需要回到这些tag的时候，我们可以用git checkout
如：git checkout v0--->>它们实际上也是指向了一个提交
ling:git_chekcout_merge (master)$ git checkout v0 
Note: checking out 'v0'.

You are in 'detached HEAD' state.……
===>>>我们现在处于一种 'detached HEAD'的状态,也就是说head的引用
      直接指向了一个commit而不是一个分支名，这样的话我们在这个commit
      后面进行工作，切换到其它分支的时候，这部分历史将会丢弃掉

那我们该如何做？
用————>>>  git checkout -b <new-branch-name>//实质上是git branch 与 git checkout 的组合命令
去做，以当前的v0所指向的commit为基础创建一个分支``
ling:git_chekcout_merge ((INITIAL_COMMIT))$ git checkout -b fix_v0
切换到一个新分支 'fix_v0'
-----OK--->>现在可以修复v0这个tag了--->>>

-->>改完之后添加到暂存区，然后切换到其它分支时出现
error: Your local changes to the following files would be overwritten by checkout:
	master.txt
Please, commit your changes or stash them before you can switch branches.
Aborting
---->>说的是你本地的一些修改还没有被提交，chekcout的时候就会把你本地的一些修改给覆盖掉
---->>那么它要求你提交这些修改或者stash起来

---->>在这儿我们想把暂存区给 stash 起来                -------stash1 为一些stash信息
ling:git_chekcout_merge (fix_v0 +)$ git stash save -a "stash1"
Saved working directory and index state On fix_v0: stash1 //告诉我们stash好了
HEAD 现在位于 8f9ba6b Initial commit on master//回到现前的state

//此时我们的working directory clean
ling:git_chekcout_merge (fix_v0)$ git status
位于分支 fix_v0
无文件要提交，干净的工作区


----->>现在可以开心切换到其它分支了～～～～9:52
ling:git_chekcout_merge (fix_v0)$ git checkout master 
切换到分支 'master'
--->>>master工作完成了，回到之前分支工作
ling:git_chekcout_merge (master)$ git checkout fix_v0
--->>>这下要还原我们之前stash的东西～～
--->>>首先看一下我们的stash list都有啥
ling:git_chekcout_merge (fix_v0)$ git stash list 
stash@{0}: On fix_v0: stash1
--->>>OK 此时还原一下
ling:git_chekcout_merge (fix_v0)$ git stash pop --index stash@{0}
位于分支 fix_v0
要提交的变更：
  （使用 "git reset HEAD <文件>..." 撤出暂存区）

	修改：     master.txt

丢弃了 stash@{0} (f22896c20888c3f6bc3aaa7d814d965c698c7506)

//让git还原stash的时候不要丢掉我们的stash
ling:git_chekcout_merge (fix_v0)$ git stash apply --index stash@{0}
位于分支 fix_v0
要提交的变更：
  （使用 "git reset HEAD <文件>..." 撤出暂存区）

	修改：     master.txt

//单纯的清除掉stash
ling:git_chekcout_merge (fix_v0 +)$ git stash drop stash@{0}

//清理所有的stash
ling:git_chekcout_merge (fix_v0 +)$ git stash clear 

/*
	有了分支的工作
	某个时间点就需要把它合并到我们想要的分支
	不然分支的意义就不大了
*/
-->>ok,现在切换回master分支，并创建一个test_merge分支
ling:git_chekcout_merge (fix_v0 +)$ git stash save
ling:git_chekcout_merge (fix_v0)$ git checkout master 
切换到分支 'master'
ling:git_chekcout_merge (master)$ git checkout -b test_merge
//做一些操作并添加到历史记录里面
ling:git_chekcout_merge (test_merge)$ vim master.txt 
ling:git_chekcout_merge (test_merge *)$ git add .
ling:git_chekcout_merge (test_merge +)$ git commit -m "Initial commit on test_merge"

//看一下树状结构
ling:git_chekcout_merge (test_merge)$ git lol
* fa41a94 (HEAD -> test_merge) Initial commit on test_merge
| *   bc02fdc (refs/stash) WIP on fix_v0: 8f9ba6b Initial commit on master
| |\  
| | * 193e0d9 index on fix_v0: 8f9ba6b Initial commit on master
| |/  
| | * 4cd6e16 (test) Initial commit on test
| |/  
|/|   
* | b41e34e (master) Second commit on master
|/  
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master

/×
	把test_merge上的操作merge到master分支上
×/
ling:git_chekcout_merge (test_merge)$ git checkout master 

ling:git_chekcout_merge (master)$ git merge test_merge 
更新 b41e34e..fa41a94
Fast-forward
 master.txt | 1 +
 1 file changed, 1 insertion(+)

/×
	Fast-forward 的 merge
	表明要merge的分支是当前分支所衍生出来的
	这时候我们只需要把我们工作区和暂存区恢复成要merge的分支,然后
	把当前分支指向它即可，无需创建一个新的commit来合并
×/
看一下树状结构
* fa41a94 (HEAD -> master, test_merge) Initial commit on test_merge
| *   bc02fdc (refs/stash) WIP on fix_v0: 8f9ba6b Initial commit on master
| |\  
| | * 193e0d9 index on fix_v0: 8f9ba6b Initial commit on master
| |/  
| | * 4cd6e16 (test) Initial commit on test
| |/  
|/|   
* | b41e34e Second commit on master
|/  
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master

--->>现在我们在master分支上又要合并我们的test分支,会出现啥子装况了～～
ling:git_chekcout_merge (master)$ git merge test
自动合并 master.txt
冲突（内容）：合并冲突于 master.txt
自动合并失败，修正冲突然后提交修正的结果。
//报错了～～
//因为我们在test和test_merge分支上相同的地方修改了同样的内容

--->>如果想放弃掉这次的提交，可以这样做～～
ling:git_chekcout_merge (master *+|MERGING)$ git merge --abort

--->>继续合并的话，可以编辑这个冲突的文件
ling:git_chekcout_merge (master *+|MERGING)$ vim master.txt 
Initial commit on master
Second commit on master
<<<<<<< HEAD
Initial commit on test_merge    
=======
Initial commit on test
>>>>>>> test

/×
	<<<<<<< HEAD
	当前我们分支上的内容
	=======
	test分支上的内容
	>>>>>>> test
×/

---->>此时我们可以干掉我们不想要的东西
/×
     修改完成之后保存并执行
     ling:git_chekcout_merge (master *+|MERGING)$ vim master.txt 
     ling:git_chekcout_merge (master *+|MERGING)$ git add master.txt 
     ling:git_chekcout_merge (master +|MERGING)$ git commit 
     [master 9ad3dbe] Merge branch 'test'

     ---->>与刚才不同的是，它新加了一个commit来承载merge的信息
×/


/×Review×/
1.所谓分支就是一个commit的引用
2.在这些分支上工作会产生各自的历史
3.所谓分支切换实际上是HEAD引用的移动，以及暂存区与工作区还原
4.tag指向一个固定的引用，分两种，一种是轻量级的，一种是带注解的
5.带注解的的是一个tag的对象
6.git branch test产生分支的时候，它的分支并没有切换
7.用git checkout test才会切换到这个分支
8.merge分两种，一种是fast-farword merge,一种是non-fast-farword merge(三方合并)

--------------@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@22==================
//查看和对比历史记录
1.git show
2.git log
3.git diff

/*
--------------------------------------
*   9ad3dbe (HEAD -> master) Merge branch 'test'
|\  
| * 4cd6e16 (test) Initial commit on test
* | fa41a94 (test_merge) Initial commit on test_merge
|/  
* b41e34e Second commit on master
| *   bc02fdc (refs/stash) WIP on fix_v0: 8f9ba6b Initial commit on master
| |\  
|/ /  
| * 193e0d9 index on fix_v0: 8f9ba6b Initial commit on master
|/  
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master
------------------------------------------------------------------
	git show 可以接受git的一个对象作为参数
	因此可以使用
	ling:git_chekcout_merge (master)$ git show 9ad3dbe
	ling:git_chekcout_merge (master)$ git show master//和上面是等价的
	ling:git_chekcout_merge (master)$ git show HEAD  //和上面是等价的
	commit 9ad3dbe81a7234da98bccd0dd7fd0c73a85329ef
	Merge: fa41a94 4cd6e16
	     第一附提交 第二附提交
 	Author: hiizuowei <hiizuowei@gmail.com>
	Date:   Sat Jun 13 00:30:04 2015 +0800

	    Merge branch 'test'
	-------------------------------------------------
	$ git show master^--->>指向的是master当前commit的第一附提交
	还可使用$ git show master~
	要查看第二附提交
	$ git show master^2
	
	ling:git_chekcout_merge (master)$ git show --oneline master^2
	--->>在这里能看到与它的父提交的一个差异
	
	---->>能看到一些统计信息
	ling:git_chekcout_merge (master)$ git show --stat master^2

	---->>组合起来这些参数
	ling:git_chekcout_merge (master)$ git show --oneline --stat master^2
	4cd6e16 Initial commit on test
	 master.txt | 1 +
	 test.txt   | 0
	 2 files changed, 1 insertion(+)
	
	--->>show一下实际的tag对象
	ling:git_chekcout_merge (master)$ git show INITIAL_COMMIT 
	
	--->> 格式化看一下commit所指向的tree对象
	ling:git_chekcout_merge (master)$ git show --format=%T master^2
	67f1806bf41f316ba403cdfb48449cad1d2a55d3

	diff --git a/master.txt b/master.txt
	index 69bd07b..151abd4 100644
	     ------------------
	      blob对象  blob对象
---------------------------------------------
	--->>看一下这个tree对象
	ling:git_chekcout_merge (master)$ git show 67f180
	tree 67f180

	master.txt
	test.txt
	------>>这个tree对象里面有两个文件
	
	------>>>此时我们来看一下blob对象中的内容
	$ git show 69bd07b
	$ git show 151abd4

*/

------>>显示完整的commit信息
$ git log
//空格，f向下翻页
//b向上翻页，上下键单行的移动，按q退出

----->>
$git log -p //来输出每一个commit之间差异信息

ling:git_chekcout_merge (master)$ git log --stat
//来输出每一个commit之间差异的统计信息

$git log --oneline //来输出单行的一些信息

//组合参数
$ git log --oneline --stat //单行简短的与差异统计信息
//
$ git log --oneline --decorate --graph --all//

/*
	--decorate:表明一些commit引用的信息
	--graph:表明图形化的一些历史信息
	--all:表是输出所有分支的信息
	
*/
/×
	git log is a powerful tool.
	1.了解到git的历史信息是怎么存储的?
	2. 历史是怎样变话的？
	3. 每个历史之间它们都有怎样的差异？
	
×/



``````````````git diff--------------------

这个工具来让我们来比较差异～～

ling:git_chekcout_merge (master)$ git diff
//直接git diff 表示工作区与暂存区的一个差异

如何查看我们的暂存区与历史记录之间的一个差别了？
我们可以输入git diff --cached

如何查看工作区与其它历史提交的一个差异？
还可以指定这些差异中特定文件的差异
ling:git_chekcout_merge (master +)$ git diff HEAD~2 -- master.txt


如何查看暂存区与其它历史提交的一个差异？
ling:git_chekcout_merge (master +)$ git diff --cached HEAD~2

如何看两个commit之间的差异呢？
如：看当前commit与前两个commit之间的一个差异？
ling:git_chekcout_merge (master +)$ git diff HEAD HEAD~2
--->>某个文件的具体差异
ling:git_chekcout_merge (master +)$ git diff HEAD HEAD~2 -- master.txt

-->>不想看整一行的差异，只想看某个单词的
ling:git_chekcout_merge (master *+)$ git diff --color-words
ling:git_chekcout_merge (master *+)$ git diff --word-diff


//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@撤消修改
1.git checkout
/*
	1.创建，切换分支
	2.还原我们的工作区
*/
2.git reset
/×
	1.还原我们暂存区
	
×/
3.git clean
/×
	对于一些还没有添加进暂存区的文件
	也就是git 还没有跟踪的文件
	可以用git clean来清除它们
×/
4.git revert
/×
	产生一个新的提交来覆盖之前的提交所产生的修改
×/




-------------------------------
修改一下master.txt
-------------------------------
/*看一下工作区与暂存区的差异*/
ling:git_undo (master *)$ git diff
/×看一下当前的一个状态×/
ling:git_undo (master *)$ git status
/*撤消工作区的这次修改*/
ling:git_undo (master *)$ git checkout -- master.txt
---->>实质上就是用暂存区的文件来覆盖工作区的文件


/×弄一下暂存区丢弃×/
ling:git_undo (master)$ vim master.txt 
ling:git_undo (master *)$ git add master.txt 
ling:git_undo (master +)$ git status
位于分支 master
要提交的变更：
  （使用 "git reset HEAD <文件>..." 撤出暂存区）

	修改：     master.txt

ling:git_undo (master +)$ git reset master.txt //还原我们的暂存区
/×实质上这里就是用当前的历史记录还原我们的暂存区×/
重置后撤出暂存区的变更：
M	master.txt
ling:git_undo (master *)$ git diff --cached //看一下暂存区与历史记录差异
ling:git_undo (master *)$ git status
位于分支 master
尚未暂存以备提交的变更：
  （使用 "git add <文件>..." 更新要提交的内容）
  （使用 "git checkout -- <文件>..." 丢弃工作区的改动）

	修改：     master.txt

修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）

？？能不能用别的历史提交的内容来还原我们的暂存区与工作区？
ling:git_undo (master *)$ git checkout INITIAL_COMMIT -- master.txt
ling:git_undo (master +)$ git status
位于分支 master
要提交的变更：
  （使用 "git reset HEAD <文件>..." 撤出暂存区）

	修改：     master.txt

ling:git_undo (master +)$ git diff --cached
diff --git a/master.txt b/master.txt
index dc54100..c5e304a 100644
--- a/master.txt
+++ b/master.txt
@@ -1,3 +1 @@
 Initial commit on master
-Second commit on master
-Initial commit on test_merge
ling:git_undo (master +)$ git checkout HEAD -- master.txt 
/*现在用最新的历史提交来还原我们的暂存区与工作区*/

？？？现在想只用某一个历史提交来还原我们的暂存区而不是工作区？
ling:git_undo (master)$ git reset INITIAL_COMMIT -- master.txt
重置后撤出暂存区的变更：
M	master.txt
ling:git_undo (master *+)$ git status
位于分支 master
要提交的变更：
  （使用 "git reset HEAD <文件>..." 撤出暂存区）

	修改：     master.txt

尚未暂存以备提交的变更：
  （使用 "git add <文件>..." 更新要提交的内容）
  （使用 "git checkout -- <文件>..." 丢弃工作区的改动）

	修改：     master.txt

ling:git_undo (master *+)$ git diff
diff --git a/master.txt b/master.txt
index c5e304a..dc54100 100644
--- a/master.txt
+++ b/master.txt
@@ -1 +1,3 @@
 Initial commit on master
+Second commit on master
+Initial commit on test_merge
ling:git_undo (master *+)$ git diff --cached
diff --git a/master.txt b/master.txt
index dc54100..c5e304a 100644
--- a/master.txt
+++ b/master.txt
@@ -1,3 +1 @@
 Initial commit on master
-Second commit on master
-Initial commit on test_merge
ling:git_undo (master *+)$ git reset master.txt /×恢复到最新提交×/

/*
	有时候我们并不想要编译工具给我们产生的一些中间文件
	如test.o,test.a这些个文件我们是并不需要的
*/
e.g.
	
ling:git_undo (master)$ touch test.o test.a
ling:git_undo (master)$ ls
master.txt  test.a  test.o  test.txt

ling:git_undo (master)$ git clean -n/×用它来看一下git clean将会帮我们移出掉那些内容×/
将删除 test.a
将删除 test.o
ling:git_undo (master)$ git clean -f/×强制把这些个文件干掉×/
正删除 test.a
正删除 test.o

/×
	有时候我们项目中用.gitignore屏蔽了一些文件
	这时候，如过我们用git clean会发生啥了？
×/
ling:git_undo (master)$ vim .gitignore
ling:git_undo (master)$ git add .gitignore 
ling:git_undo (master +)$ git commit -m "add ignore"
[master 1561cea] add ignore
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore
ling:git_undo (master)$ touch test.o test.a
ling:git_undo (master)$ touch test.c
ling:git_undo (master)$ ls
master.txt  test.a  test.c  test.o  test.txt
ling:git_undo (master)$ git clean -n
将删除 test.c
----->>>
	我们新创建了3个文件并且没有跟踪，，发现仅仅可以干掉test.c
	git clean 默认并不清理.gitignore中的一些个文件

---->>我们想要干掉工作区中没有被跟踪的文件 和 .gitignore中所忽略的文件
先看一下
ling:git_undo (master)$ git clean -n -x
将删除 test.a
将删除 test.c
将删除 test.o
再执行
ling:git_undo (master)$ git clean -f -x
正删除 test.a
正删除 test.c
正删除 test.o
----->>我们只想干掉.gitignore中所忽略的文件
先看一下
ling:git_undo (master)$ touch test.c test.a test.o
ling:git_undo (master)$ ls
master.txt  test.a  test.c  test.o  test.txt
ling:git_undo (master)$ git clean -n -X
将删除 test.a
将删除 test.o
再执行
ling:git_undo (master)$ git clean -f -X
正删除 test.a
正删除 test.o
------------------------------------------

如果说：我们有某个历史提交并不需要，我们可以产生一个新的提交来盖掉它？
e.g.
如刚提交.gitignore文件我们并不需要？
可以~~
ling:git_undo (master)$ git revert HEAD 
[master 8580fb7] Revert "add ignore" //产生一个revert的提交
 1 file changed, 1 deletion(-)
 delete mode 100644 .gitignore //删除了.gitignore文件

此时工作区没有了.gitignore文件了
ling:git_undo (master)$ ls -la
总用量 16
drwxrwxr-x 3 ling ling 4096  6月 15 22:55 .
drwxrwxr-x 6 ling ling 4096  6月 13 23:15 ..
drwxrwxr-x 8 ling ling 4096  6月 15 22:56 .git
-rw-rw-r-- 1 ling ling   78  6月 13 23:55 master.txt
-rw-rw-r-- 1 ling ling    0  6月 15 22:51 test.c
-rw-rw-r-- 1 ling ling    0  6月 13 23:19 test.txt
----------------------------------------------------------------
/×
	Review
	
	注意：git revert 6c39b2
	意思是对6c39b2引入的改变取反应用到新的提交
×/

----------@@@@@@@@@@@@@@@@@@@-------------------
重写历史记录
1、git commit --amend //可以产生一个新的提交用来替换掉当前所指向的提交
2、git rebase //有着超强的历史修改能力，这里是要让它帮我维护一个线性的历史
3、git reset 
/*
	如当前产生了一个合并的提交
	希望撤消掉这样一个提交
	让我们历史看上去跟没有合并之前是一样的
*/
4、git reflog/×维护了HEAD引用的一些个历史信息×/
/*通常配合git reset来使用*/

-----------<>>>>首先还原回.gitignore文件
ling:git_rewrite_history (master)$ git checkout HEAD~ -- .gitignore
//将test.c添加进暂存区
ling:git_rewrite_history (master +)$ git add test.c 
//修改我们的提交
ling:git_rewrite_history (master +)$ git commit --amend
[master b62e40c] This is an amend commit
 Date: Mon Jun 15 22:55:48 2015 +0800
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test.c
//这样我们原来的提交就被替换掉了
ling:git_rewrite_history (master)$ git lol
* b62e40c (HEAD -> master) This is an amend commit
* 1561cea add ignore
*   9ad3dbe Merge branch 'test'
|\  
| * 4cd6e16 (test) Initial commit on test
* | fa41a94 (test_merge) Initial commit on test_merge
|/  
* b41e34e Second commit on master
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master
//---->>>可以清晰的看到原来的git revert 所产生的提交就不复存在了～～

//---->>git rebase能够帮我们干啥～～？？

step 1--->>
修改一下master.txt加入到历史记录
ling:git_rewrite_history (master)$ vim master.txt 
ling:git_rewrite_history (master *)$ git add master.txt 
ling:git_rewrite_history (master +)$ git commit -m "conflict rebase"
[master 43ae7b6] conflict rebase
 1 file changed, 1 insertion(+)
//基于本次提交之前的提交创建一个分支
ling:git_rewrite_history (master)$ git checkout -b test_rebase HEAD~
//修改一下添加的历史记录
ling:git_rewrite_history (test_rebase)$ vim master.txt 
ling:git_rewrite_history (test_rebase *)$ git add master.txt 
ling:git_rewrite_history (test_rebase +)$ git commit -m "Initial commit on test_rebase"
[test_rebase 74183d4] Initial commit on test_rebase
 1 file changed, 1 insertion(+)



------------@@@@@@@@@@@@@@@@22
ling:git_rewrite_history (test_rebase)$ git lol
* 74183d4 (HEAD -> test_rebase) Initial commit on test_rebase
| * 43ae7b6 (master) conflict rebase
|/  
* b62e40c This is an amend commit
* 1561cea add ignore
*   9ad3dbe Merge branch 'test'
|\  
| * 4cd6e16 (test) Initial commit on test
* | fa41a94 (test_merge) Initial commit on test_merge
|/  
* b41e34e Second commit on master
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master


------------@@@@@@@@@@@@@@@@@@2222
//怎样让test_rebase合并后的历史看上去它是线性的呢？
ling:git_rewrite_history (test_rebase)$ git rebase master
--->>冲突了～～
放弃掉rebase
ling:git_rewrite_history (test_rebase *+|REBASE 1/1)$ git rebase --abort 

--->>想让rebase继续
ling:git_rewrite_history (test_rebase)$ git rebase master 
--->>修改我们冲突的文件
ling:git_rewrite_history (test_rebase *+|REBASE 1/1)$ vim master.txt 
//添加到暂存区
ling:git_rewrite_history (test_rebase *+|REBASE 1/1)$ git add master.txt 
//继续rebase
ling:git_rewrite_history (test_rebase +|REBASE 1/1)$ git rebase --continue 
正应用：Initial commit on test_rebase
---@@@@@@@@@@@@@@@2
* b9eb4e7 (HEAD -> test_rebase) Initial commit on test_rebase
* 43ae7b6 (master) conflict rebase
* b62e40c This is an amend commit
* 1561cea add ignore
*   9ad3dbe Merge branch 'test'
|\  
| * 4cd6e16 (test) Initial commit on test
* | fa41a94 (test_merge) Initial commit on test_merge
|/  
* b41e34e Second commit on master
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master
---@@@@@@@@@@@@@@22
------------->>>>>这样看起来就是一个线型的提交，而不是合并产生新的提交


-------------->>>
突然，现在这个rebase操作搞错了～～
想回到之前的一个状态～～
但是发现用git lol 找不到之前的那样一个历史了？
------->>这时我们用git reflog
ling:git_rewrite_history (test_rebase)$ git reflog
b9eb4e7 HEAD@{0}: rebase finished: returning to refs/heads/test_rebase
b9eb4e7 HEAD@{1}: rebase: Initial commit on test_rebase
43ae7b6 HEAD@{2}: rebase: checkout master
74183d4 HEAD@{3}: rebase: aborting
43ae7b6 HEAD@{4}: rebase: checkout master
74183d4 HEAD@{5}: commit: Initial commit on test_rebase
…………………………
------->>它维护HEAD引用的一个历史
此时可以清晰的看到在test_rebase上最后的一个提交74183d4 HEAD@{5}
此时我们执行一下
ling:git_rewrite_history (test_rebase)$ git reset --hard HEAD@{5}
HEAD 现在位于 74183d4 Initial commit on test_rebase
ling:git_rewrite_history (test_rebase)$ git lol
* 74183d4 (HEAD -> test_rebase) Initial commit on test_rebase
| * 43ae7b6 (master) conflict rebase
|/  
* b62e40c This is an amend commit
* 1561cea add ignore
*   9ad3dbe Merge branch 'test'
|\  
| * 4cd6e16 (test) Initial commit on test
* | fa41a94 (test_merge) Initial commit on test_merge
|/  
* b41e34e Second commit on master
* 8f9ba6b (tag: v0, tag: INITIAL_COMMIT, fix_v0) Initial commit on master
---->>发现历史和我们做rebase之前是一样的
---->>实际上是把分支名和HEAD引用指向了
* 74183d4 (HEAD -> test_rebase) Initial commit on test_rebase
这个commit上去～～～
----------@@@@@@@@@@@@@@@@@@@@@@@@@@@@@----------------

git reset --hard HEAD@{5}

--hard 这个参数是让我们的工作区和暂存区的内容都被这个历史记录给还原
	然后把HEAD和分支的引用指向这个commit
--mixed 这个参数是让我们的暂存区的内容都被这个历史记录给还原
	然后把HEAD和分支的引用指向这个commit（这是默认效果）
--soft 只把HEAD和分支的引用指向这个commit，不还原内容

e.g--->>
ling:git_rewrite_history (test_rebase)$ git reset --mixed HEAD~
重置后撤出暂存区的变更：
M	master.txt
ling:git_rewrite_history (test_rebase *)$ git status
位于分支 test_rebase
尚未暂存以备提交的变更：
  （使用 "git add <文件>..." 更新要提交的内容）
  （使用 "git checkout -- <文件>..." 丢弃工作区的改动）

	修改：     master.txt

修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
---->>>>>只显示了工作区与暂存区有区别
---->>>>>也就是说它只是还原了我们的暂存区
--->>看一下工作区与暂层区的区别
ling:git_rewrite_history (test_rebase *)$ git diff
diff --git a/master.txt b/master.txt
index dc54100..93a9ae1 100644
--- a/master.txt
+++ b/master.txt
@@ -1,3 +1,4 @@
 Initial commit on master
 Second commit on master
 Initial commit on test_merge
+Initial commit on test_rebase



/×输出近十条的HEAD引用×/
ling:git_rewrite_history (test_rebase *)$ git reflog -10
b62e40c HEAD@{0}: reset: moving to HEAD~
74183d4 HEAD@{1}: reset: moving to HEAD@{5}
b9eb4e7 HEAD@{2}: rebase finished: returning to refs/heads/test_rebase
b9eb4e7 HEAD@{3}: rebase: Initial commit on test_rebase
43ae7b6 HEAD@{4}: rebase: checkout master
74183d4 HEAD@{5}: rebase: aborting
43ae7b6 HEAD@{6}: rebase: checkout master
74183d4 HEAD@{7}: commit: Initial commit on test_rebase
b62e40c HEAD@{8}: checkout: moving from master to test_rebase
43ae7b6 HEAD@{9}: commit: conflict rebase

/*OK,撤消刚刚的这么一个操作*/
ling:git_rewrite_history (test_rebase *)$ git reset --hard HEAD@{5}
HEAD 现在位于 74183d4 Initial commit on test_rebase


/×现在试一下--soft×/
ling:git_rewrite_history (test_rebase)$ git reset --soft HEAD~
ling:git_rewrite_history (test_rebase +)$ git status
位于分支 test_rebase
要提交的变更：
  （使用 "git reset HEAD <文件>..." 撤出暂存区）

	修改：     master.txt

ling:git_rewrite_history (test_rebase +)$ git diff --cached
diff --git a/master.txt b/master.txt
index dc54100..93a9ae1 100644
--- a/master.txt
+++ b/master.txt
@@ -1,3 +1,4 @@
 Initial commit on master
 Second commit on master
 Initial commit on test_merge
+Initial commit on test_rebase








































